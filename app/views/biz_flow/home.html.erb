<script type="text/javascript">

$(document).ready(function()
{
    angular.bootstrap(document.getElementById('bizflow'), ['BizFlowApp']);

    $('#tab4').find('input[type="radio"]').change(function(event) {
        $('body').removeClass();
        $('body').addClass($(this).val());
    });
});

var ResultStatus = 
{
    OK:       1,
    FAILURE:  2,
    OK_EXTRA: 3
};

var bizflow = angular.module("BizFlowApp", []);

var bizFlowCtrl = function($scope, $http, $templateCache)
{
    $http.defaults.useXDomain = true;
    delete $http.defaults.headers.common['X-Requested-With'];
    $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    $http.defaults.headers.post['Accept'] = 'text/json';
    $scope.methods  = 
    {
        get:  'GET',
        post: 'POST'
    };

    $scope.url            = '<%= @host %>bmp/bizflow.json?dataAreaId=strd&encoding=UTF-8&module=production'; 
    $scope.InventUrl      = '<%= @host %>bmp/bizflow.json?dataAreaId=strd&encoding=UTF-8&module=invent'; 
    $scope.loading        = true;
    $scope.cylinder       = new CylinderItems();
    $scope.planner        = new PlannerItems();
    $scope.history        = {};
    $scope.historyLength  = 0;
    $scope.productionRecipeName = '';
    $scope.planningRecipeName   = '';
    $scope.recipes;
    $scope.catalogIsSorted = false;
    $scope.items          = {};

    init();

    function init()
    {
        executeQuery($scope.methods.get, $scope.url,       "", initializeCallback, errorCallback);
        executeQuery($scope.methods.get, $scope.InventUrl, "", isotopeInit,        errorCallback);
    }

    function isotopeInit(data, status)
    {
        $scope.items = data.items;

        $('#items-catalog').isotope({
            itemSelector: '.catalog-item',
            layoutMode:   'masonry',
            getSortData: {
                'item-uom': function($elem){
                    return $elem.find('.item-uom').text();
                },
                'item-name': function($elem){
                    return $elem.find('.item-name').text();
                },
                'item-group': function($elem){
                    return $elem.find('.item-group').text();
                },
                'item-id': function($elem){
                    return $elem.find('.item-id').text();
                },
                'item-type': function($elem){
                    return $elem.find('.item-type').text();
                }
            },
            sortBy : 'item-name'
        });

        $('#sorting a').click(function(element){
            $('#sorting a').removeClass("active");
            $(this).addClass("active");
            var sortName = $(this).attr('href').slice(1);
            $('#items-catalog').isotope({ sortBy : sortName });
            return false;
        });

        console.log($scope.items);

        angular.forEach($scope.items, function(item) {
            var $newEls = $('<div class="catalog-item">' +
                                '<div class="item-card">' +
                                    '<p class="item-uom">' + item.itemUOM + '</p>' +
                                    '<p class="item-name">' + item.itemName + '</p>' +
                                    '<p class="item-id">' + item.itemId +'</p>' +
                                    '<p class="item-group">Группа: ' + item.itemGroup + '</p>' +
                                    '<p class="item-type">Тип: ' + item.itemType + '</p>' +
                                '</div>' +
                            '</div>');
            $('#items-catalog').isotope('insert', $newEls);
        });
    }

    // Выполняет запрос заданного типа, по заданной URL;
    // В случае успеха выполняется successCallback, в случае ошибки - errorCallback;
    function executeQuery(queryMethod, queryUrl, queryData, successCallback, errorCallback)
    {
        $scope.loading = true;
        $http({
            method: queryMethod,
            url: queryUrl,
            data: queryData,
            cache: $templateCache})
        .success(successCallback)
        .error(errorCallback);
    }

    function errorCallback(data, status)
    {
        console.log(data);
        $scope.loading = false;
    }

    // Инициализация рецептов
    function initializeCallback(data, status)
    {
        console.log("Request was successful");
        $scope.recipes = $.extend(true, {}, data.Reciptes);

        for(var key in $scope.recipes)
        {
            $scope.productionRecipeName = key;
            $scope.planningRecipeName   = key;
            break;
        }

        $('a[id="catalog-button"]').on('shown.bs.tab', function (e) {
            if(!$scope.catalogIsSorted && e.target)
            {
                var sortName = $('#sorting').find(".disabled").first().attr('href').slice(1);
                $('#items-catalog').isotope({ sortBy : sortName });
                $scope.catalogIsSorted = true;
            }
        });

        $scope.loading = false;
    }

    function addToHistory(inputs, outputs, recipeName, data, type)
    {
        var old = 
        {
            'inputs':     $.extend(true, {}, inputs),
            'outputs':    $.extend(true, {}, outputs),
            'recipeName': recipeName,
            'date':       (new Date()).toLocaleString(),
            'result':     data.result,
            'status':     data.status,
            'type':       type
        };

        $scope.history[($scope.historyLength++) + ''] = old;
        $scope.recipes = data.newReciptes.Reciptes;
    }

    // Выполняется при оформлении производства
    function successProductionCallback(data, status)
    {
        console.log("Request was successful");
        addToHistory($scope.cylinder.inputs, $scope.cylinder.outputs, $scope.productionRecipeName, data, 'production');
        $scope.loading = false;

        $('html, body').animate({
            scrollTop: $("#productionInputs").offset().top
        }, "slow");
    }

    // Выполняется при оформлении планирования
    function successPlanningCallback(data, status)
    {
        console.log("Request was successful");
        addToHistory($scope.planner.vessels, $scope.planner.outputs, $scope.planningRecipeName, data, 'planning');
        $scope.loading = false;

        $('html, body').animate({
            scrollTop: $("#planning-inputs").offset().top
        }, "slow");
    }

    function createSendData(recipeName, outputs, actionType)
    {
        var sendData =
        {
            dataAreaId: 'strd',
            encoding: 'UTF-8',
            actionType: actionType,
            userId: 'test',
            Order:
            {
                recipeName: recipeName,
                totalCount: 0
            }
        };

        for(var key in outputs)
        {
            sendData.Order.totalCount += outputs[key].qty;
        }

        return sendData;
    }

    // Выполняется при нажатии кнопки Пуск производства
    $scope.productionExecute = function()
    {
        var sendData = createSendData($scope.productionRecipeName, $scope.cylinder.outputs, 'production');
        executeQuery($scope.methods.post, $scope.url, JSON.stringify(sendData), successProductionCallback, errorCallback);
    };

    // Выполняется при нажатии кнопки Пуск планирования
    $scope.planningExecute = function()
    {
        var sendData = createSendData($scope.planningRecipeName, $scope.planner.outputs, 'planning');
        executeQuery($scope.methods.post, $scope.url, JSON.stringify(sendData), successPlanningCallback, errorCallback);
    };

    // Поличить корректную подпись для продукта
    $scope.getOutputName = function(output, recipeName)
    {
        if($scope.recipes[recipeName].itemType == 40) 
        {
            return output.productName;
        }
        else
        {
            return output.productName + ' (' + output.pct + '%)';
        }
    };

    // Поличить корректную подпись для продукта
    $scope.getInputName = function(input, recipeName)
    {
        if($scope.recipes[recipeName].itemType == 40) 
        {
            return input.productName;
        }
        else
        {
            return input.productName + ' (' + input.pct + '%)';
        }
    };

    $scope.inputSpanType = function()
    {
        var type = Math.ceil(12 / $scope.recipes[$scope.productionRecipeName].inputs.length);
        if(type < 3) type = 3;
        return type; 
    };

    $scope.outputSpanType = function()
    {
        var type = Math.ceil(12 / $scope.recipes[$scope.productionRecipeName].outputs.length);
        if(type < 3) type = 3;
        return type; 
    };

    $scope.inputHistorySpanType = function(recipeName)
    {
        var type = Math.ceil(12 / $scope.recipes[recipeName].inputs.length);
        if(type < 3) type = 3;
        return type; 
    };

    $scope.executeButtonDisabled = function()
    {
        return ($scope.loading || !$scope.productionRecipeName);
    };

    $scope.planningButtonDisabled = function()
    {
        return ($scope.loading || !$scope.planningRecipeName);
    };

    $scope.outputHistorySpanType = function(recipeName)
    {
        var type = Math.ceil(12 / $scope.recipes[recipeName].outputs.length);
        if(type < 3) type = 3;
        return type; 
    };

    $scope.orderSuccess = function(old)
    {
        return (old.status == ResultStatus.OK || old.status == ResultStatus.OK_EXTRA);
    };

    $scope.setProductionRecipeName = function(name) {
        $scope.productionRecipeName = name;
    };

    $scope.setPlanningRecipeName = function(name) {
        $scope.planningRecipeName = name;
    };

    $scope.exit = function() {
        window.location.replace('<%= @host %>');
    };
};

bizflow.controller("bizFlowCtrl", bizFlowCtrl);

bizflow.directive('cylinder', CylinderDirective);
bizflow.directive('history', HistoryDirective);

bizflow.directive('commVessels', CommVesselsDirective);
bizflow.directive('planning', PlanningProductDirective);

function HistoryDirective($compile) 
{       
    return {
        link: function($scope, element, attrs) {
            var key     = attrs.key;
            var history = $scope.history[key];
            var tpl;

            switch(history['type'])
            {
                case 'production':
                    tpl = $compile('<div class="row-fluid" id="inputs"></div>')($scope);
                    $(element).find('#history').append(tpl);
                    tpl = $compile('<div class="row-fluid" id="operation"></div>')($scope);
                    $(element).find('#history').append(tpl);
                    tpl = $compile('<div class="row-fluid" id="outputs"></div>')($scope);
                    $(element).find('#history').append(tpl);

                    for(var label in history.inputs)
                    {
                        tpl = $compile( '<div class="span' + $scope.inputHistorySpanType(history.recipeName) + '">' +
                                            '<div class="history-body circle-border">' +
                                                '<ul>' +
                                                    '<li>' + label + '</li>' +
                                                    '<li>' + history.inputs[label].qty + ' ' + history.inputs[label].uom  + '</li>' +
                                                '</ul>' +
                                            '</div>' +
                                            '<div class="arrow-input"></div>' + 
                                        '</div>')($scope);
                        $(element).find("#inputs").append(tpl);
                    }
                    for(var label in history.outputs)
                    {
                        tpl = $compile( '<div class="span' + $scope.outputHistorySpanType(history.recipeName) + '">' +
                                            '<div class="arrow-output"></div>' + 
                                            '<div class="history-body circle-border">' +
                                                '<ul>' +
                                                    '<li>' + label + '</li>' +
                                                    '<li>' + history.outputs[label].qty + ' ' + history.outputs[label].uom + '</li>' +
                                                '</ul>' +
                                            '</div>' +
                                        '</div>')($scope);
                        $(element).find("#outputs").append(tpl);
                    }
                    tpl = $compile( '<div class="span12 circle-border history-recipe-' + $scope.orderSuccess(history) + '">' +
                                        '<h3>Операция: ' + history.recipeName + '</h3>' +
                                        '<ul>' +
                                            '<li>Дата: ' + history.date + '</li>' +
                                            '<li>' + history.result + '</li>' +
                                        '</ul>' +
                                    '</div>')($scope);
                    $(element).find("#operation").append(tpl);
                    break;

                case 'planning':
                    for(var label in history.inputs)
                    {
                        var leftCount = history.inputs[label].qty - history.inputs[label].onWorkshop;
                        if(leftCount < 0) leftCount = 0;
                        leftCount = roundingTruncate(history.inputs[label].onStorage - leftCount, history.inputs[label].accuracy, history.inputs[label].rounding);

                        var orderQty =  roundingTruncate(history.inputs[label].qty - history.inputs[label].onWorkshop, history.inputs[label].accuracy, history.inputs[label].rounding);
                        if(orderQty < 0) orderQty = 0;

                        var onWorkshopQty = history.inputs[label].qty;
                        if(onWorkshopQty < history.inputs[label].onWorkshop) 
                        {
                            onWorkshopQty = history.inputs[label].onWorkshop;
                        }
                        onWorkshopQty = roundingTruncate(onWorkshopQty, history.inputs[label].accuracy, history.inputs[label].rounding);
                        tpl = $compile( '<div class="row-fluid planning-history-row">' +
                                            '<div class="span4 planning-history-body circle-border">' +
                                                '<span>Остаток на складе: ' + leftCount + ' ' + history.inputs[label].uom + '</span>' +
                                            '</div>' +
                                            '<div class="span4 planning-history-body circle-border">' +
                                                '<span>Взято со склада ' + label + ': ' + orderQty + ' ' + history.inputs[label].uom + '</span>' +
                                            '</div>' +
                                            '<div class="span4 planning-history-body circle-border">' +
                                                '<span>В производстве: ' + onWorkshopQty + ' ' + history.inputs[label].uom + '</span>' +
                                            '</div>' +
                                        '</div>')($scope);
                        $(element).find("#history").append(tpl);
                    }
                    for(var label in history.outputs)
                    {
                        tpl = $compile( '<div class="row-fluid" id="product">' +
                                            '<div class="span12 circle-border history-recipe-' + $scope.orderSuccess(history) + '">' +
                                                '<h3>Запланировано: ' + label + ': ' + history.outputs[label].qty + ' ' + history.outputs[label].uom + '</h3>' +
                                                '<ul>' +
                                                    '<li>Дата: ' + history.date + '</li>' +
                                                    '<li>' + history.result + '</li>' +
                                                '</ul>' +
                                            '</div>' +
                                        '</div>')($scope);
                        $(element).find("#history").append(tpl);
                    }
                    break;
            }
        },

        template:   '<div class="history circle-border" id="history">' +
                    '</div>'
    }
}

</script>

<div id='bizflow'>
<div ng-controller='bizFlowCtrl' class='container-fluid'>

    <div ng-repeat='(key, old) in history | filter:query' history key="{{key}}"></div>

    <div class="tabbable">
        <div style="text-align: center;">
            <div class='btn-group' data-toggle="buttons-radio" style="display: inline-block;">
                <button class="btn btn-menu active" id="planning-button" href="#tab1" data-toggle="tab">Планирование</button>
                <button class="btn btn-menu" id="productionButton" href="#tab2" data-toggle="tab">Производство</button>
                <button class="btn btn-menu" id="catalog-button" href="#tab3" data-toggle="tab">Справочник</button>
                <button class="btn btn-menu" id="serrings-button" href="#tab4" data-toggle="tab">Настройки</button>
                <button class="btn btn-menu" ng-click="exit()">Выход</button>
            </div>
        </div>

        <br><br>
        
        <div class="tab-content tab-body">
            <div class="tab-pane active" id="tab1">

                <div class='row-fluid btn-group' data-toggle="buttons-radio" style="text-align: center;">
                    <button class="btn btn-bf btn-large" type="button" ng-repeat='recipe in recipes' ng-click="setPlanningRecipeName(recipe.name)">{{recipe.name}}</button>
                </div>

                <br><br><br>
               
                <div class="store-workshop-container">
                    <div class="store-all-container circle-border">
                        <span>Склад</span>
                    </div>
                    <div class="workshop-all-container circle-border">
                        <span>Цех</span>
                    </div>
                    <br/>
                    <div ng-repeat="input in recipes[planningRecipeName].inputs" comm-vessels label="{{getInputName(input, planningRecipeName)}}" proportion="{{input.pct}}" storageqty="{{input.componentOnHand}}" workshopqty="{{input.productOnHand}}" critical="{{input.componentCritical}}" accuracy="{{input.accuracy}}" rounding="{{input.rounding}}" uom="{{input.UOM}}"></div>
                </div>

                <div id="planning-container" class="planning-container">
                    <div id="planning-content" class="planning-content">
                        <div ng-repeat="output in recipes[planningRecipeName].outputs">
                            <div planning label="{{getOutputName(output, planningRecipeName)}}" proportion="{{output.pct}}" accuracy="{{output.accuracy}}" rounding="{{output.rounding}}" uom="{{output.UOM}}"></div>
                        </div>  
                    </div>
                </div>

                <div class='submit-container'>
                    <form ng-submit="planningExecute()" style='margin-bottom: 10px;'>
                          <input class='btn btn-bf btn-large' type='submit' value="{{loading && 'Загрузка...' || 'Пуск'}}" ng-disabled="planningButtonDisabled()">
                    </form>
                </div>
            </div>

            <div class="tab-pane" id="tab2">
                <div class='row-fluid btn-group' data-toggle="buttons-radio" style="text-align: center;">
                    <button class="btn btn-bf btn-large" type="button" ng-repeat='recipe in recipes' ng-click="setProductionRecipeName(recipe.name)">{{recipe.name}}</button>
                </div>

                <br><br><br>

                <div class='row-fluid' id='productionInputs'>
                    <div ng-repeat='input in recipes[productionRecipeName].inputs' class='span{{inputSpanType()}}'>
                        <div cylinder type='input' label='{{getInputName(input, productionRecipeName)}}' proportion='{{input.pct}}' having='{{input.productOnHand}}' critical='{{input.productCritical}}' accuracy="{{input.accuracy}}" rounding="{{input.rounding}}" uom="{{input.UOM}}"></div>
                    </div>
                </div>

                <br><br>

                <div class='row-fluid' ng-repeat='output in recipes[productionRecipeName].outputs'>
                    <div class="span3"></div>
                    <div class='span6'>
                        <div cylinder type='output' label='{{getOutputName(output, productionRecipeName)}}' proportion='{{output.pct}}' accuracy="{{output.accuracy}}" rounding="{{output.rounding}}" uom="{{output.UOM}}"></div>
                    </div>
                </div>

                <div class='submit-container'>
                    <form ng-submit="productionExecute()">
                          <input class='btn btn-bf btn-large' type='submit' value="{{loading && 'Загрузка...' || 'ПУСК'}}" ng-disabled="executeButtonDisabled()">
                    </form>
                </div>
            </div>

            <div class="tab-pane" id="tab3">
                <div id="items-catalog-container">
                    <div id="items-catalog-body">
                        <div id="sorting" class='btn-group'>
                            <a class="btn btn-bf" href="#item-name">Наименование</a>
                            <a class="btn btn-bf" href="#item-group">Группа</a>
                            <a class="btn btn-bf" href="#item-id">Идентификатор</a>
                            <a class="btn btn-bf" href="#item-type">Тип</a>
                            <a class="btn btn-bf" href="#item-uom">Единица измерения</a>
                        </div>
                        <br><br>
                        <div id="items-catalog">
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="tab4">
                <div class="row-fluid">
                    <div class="span12">
                    <div style="width: 300px; margin: 0 auto;" class="circle-border settings-container">
                    <%= form_tag(set_background_path, :remote => true, :style => "margin-bottom: 0px;") do %>
                        <legend>Фон</legend>
                        <label class="radio">
                          <%= radio_button_tag 'back', "black", @back == 'black', class: "" %> Черный
                        </label>
                        <label class="radio">
                          <%= radio_button_tag 'back', "blue", @back == 'blue', class: "" %> Синий
                        </label>
                        <label class="radio">
                          <%= radio_button_tag 'back', "gray", @back == 'gray', class: "" %> Серый
                        </label>
                        <footer class="text-right">
                            <%= submit_tag "Сохранить", class: "btn btn-bf" %>    
                        </footer>
                        
                    <% end %>

                    </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
</div>