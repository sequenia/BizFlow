    <script type="text/javascript">
    var isAnyAdjustableNumberDragging = false;

    Tangle.classes.ItemDrag = {
      initialize: function (element, options, tangle, variable) {
        this.element = element;
        this.tangle = tangle;
        this.variable = variable;

        this.min = (options.min !== undefined) ? parseFloat(options.min) : 1;
        this.max = (options.max !== undefined) ? parseFloat(options.max) : 10;
        this.step = (options.step !== undefined) ? parseFloat(options.step) : 1;
        
        this.initializeHover();
        this.initializeHelp();
        this.initializeDrag();
        this.initializeStyle();
      },

    // hover
    
    initializeHover: function () {
      this.isHovering = false;
      this.element.addEvent("mouseenter", (function () { this.isHovering = true;  this.updateRolloverEffects(); }).bind(this));
      this.element.addEvent("mouseleave", (function () { this.isHovering = false; this.updateRolloverEffects(); }).bind(this));
    },
    
    initializeStyle: function() {

    },
    
    updateRolloverEffects: function () {
      this.updateCursor();
      this.updateHelp();
    },
    
    isActive: function () {
      return this.isDragging || (this.isHovering && !isAnyAdjustableNumberDragging);
    },

    updateStyle: function (value) {

    },

    updateCursor: function () {
      var body = document.getElement("body");
      if (this.isActive()) { body.addClass("TKCursorDragHorizontal"); }
      else { body.removeClass("TKCursorDragHorizontal"); }
    },


    // help

    initializeHelp: function () {
      this.helpElement = (new Element("div", { "class": "TKAdjustableNumberHelp" })).inject(this.element, "top");
      this.helpElement.setStyle("display", "none");
      this.helpElement.set("text", "drag");
    },
    
    updateHelp: function () {
      var size = this.element.getSize();
      var top = -size.y + 7;
      var left = Math.round(0.5 * (size.x - 20));
      var display = (this.isHovering && !isAnyAdjustableNumberDragging) ? "block" : "none";
      this.helpElement.setStyles({ left:left, top:top, display:display });
    },


    // drag
    
    initializeDrag: function () {
      this.isDragging = false;
      new BVTouchable(this.element, this);
    },
    
    touchDidGoDown: function (touches) {
      var collectionName = this.element.getAttribute("collectionName"); 
      var itemNum = this.element.getAttribute("itemNum");
      this.valueAtMouseDown = angular.element(this.element).scope().getItemQty(collectionName, itemNum);
      this.isDragging = true;
      isAnyAdjustableNumberDragging = true;
      this.updateRolloverEffects();
    },
    
    touchDidMove: function (touches) {
      var value = this.valueAtMouseDown + touches.translation.x / 5 * this.step;
      var collectionName = this.element.getAttribute("collectionName");
      var itemNum = this.element.getAttribute("itemNum");
      console.log(itemNum);
      value = ((value / this.step).round() * this.step);
      if(value < this.min) value = this.min;
      this.updateHelp();
      console.log("move for " + this.element);
      scope = angular.element(this.element).scope();
      scope.$apply(function() {
        scope.updateItemQty(collectionName, itemNum, value);        
      }); 
    },
    
    touchDidGoUp: function (touches) {
      this.helpElement.setStyle("display", "none");
      this.isDragging = false;
      isAnyAdjustableNumberDragging = false;
      this.updateRolloverEffects();
    }
  };

  function setUpTangle(){
    var element = document.getElementById("production");          
    var tangle = new Tangle(element, {
      initialize: function () {
        
      },
      update: function () { 
        
      }
    });
  }

  $(document).ready(function() {
      $('.order-select').bind('change', setUpTangle);
  });

  </script>
  <body onload="setUpTangle();">
    <div id = "production" class="container-fluid text-center" ng-controller="IndexCtrl">

      <div class="row-fluid history-all">
        <div class="row-fluid" ng-repeat="oldOrder in history">
          <div class="row-fluid">
            <div class="span9">
              <div class="row-fluid">
                <div class="span{{ 12 / oldOrder.inputs.length }}" ng-repeat="input in recipes[oldOrder.recipeName].inputs">
                  <div class="history-body">
                    <h3>{{ input.productName }} ({{ input.pct }}%)</h3>
                    <span >{{ oldOrder.inputs[$index] }}</span> 
                  </div> 
                  <div class="arrow-input"></div> 
                </div>
              </div>
              <div class="row-fluid history-body">
                <h2>Операция: {{history[$index].recipeName}} </h2>
              </div>
              <div class="row-fluid">
                <div class="span{{ 12 / oldOrder.outputs.length }}" ng-repeat="output in recipes[oldOrder.recipeName].outputs">
                  <div class="arrow-output"></div> 
                  <div class="history-body">
                    <h3>{{ output.productName }} ({{ output.pct }}%)</h3>
                    <span >{{ oldOrder.outputs[$index] }}</span> 
                  </div> 
                </div>
              </div>
            </div>
            <div class="span3">
              <div class="row-fluid">
                <h3>Общий объем производства: {{ oldOrder.inputsTotal }} </h3>
              </div>  
            </div>
          </div>
          <div class="row-fluid">
            <hr/>
          </div>
        </div>
      </div>

      <div id="orderRow" class="row-fluid">
        <div class="span9">
          <div class="row-fluid">
            <div class="span{{ inputSpanType() }}" ng-repeat="input in recipes[order.recipeName].inputs">
              <div class="mixer-input">
                <h3>{{ input.productName }} ({{ input.pct }}%)</h3>
                <span class="ItemDrag over-max-{{ order.inputs[$index] > input.onHand }}" collectionName="inputs" itemNum = {{$index}} data-min="0" data-max="{{ input.onHand }}" >{{ order.inputs[$index] }}</span> 
              </div> 
              <div class="arrow-input"></div>        
            </div>
          </div>

          <div class="row-fluid mixer-body">          
            <h2>Операция: </h2>
            <select class="order-select" ng-model="order.recipeName" ng-change="setUpOrder()">
              <option ng-repeat="recipe in recipes">{{ recipe.name }}</option>              
            </select>                        
          </div>

          <div class="row-fluid">
            <div class="span{{ outputSpanType() }}" ng-repeat="output in recipes[order.recipeName].outputs">
              <div class="arrow-output"></div>
              <div class="mixer-output">
                <h3>{{ output.productName }} ({{ output.pct }}%)</h3>  
                <span class="ItemDrag over-max-{{ order.outputs[$index] > output.onHand }}" collectionName="outputs" itemNum = {{$index}} data-min="0" data-max="{{ output.onHand }}">{{ order.outputs[$index] }}</span>                
              </div>
            </div>
          </div>

          <br/>

          <div class="row-fluid">
            <form ng-submit="execute()">
              <input class="btn btn-default btn-lg" type="submit" value="Пуск!">
            </form>
          </div>
        </div>

        <div class="span3">
          <div class="row-fluid">
            <h3>Общий объем производства: {{ order.inputsTotal }} </h3>
          </div>                                 
        </div>
      </div> 

    </div>
  </body>
